# indice : sexy figures => sexy primes => paire de nombres entiers avec 6 de différence => p = q+6 => restriction de la recherche, fermat?
# mais je n'ai pas réussi à calculer les facteurs moi même

from CTF.RSA import *
#from mpmath import * # incompatible avec la fonction inverse


n = int("72713263660449766426608472549507391910999231006859839072293277211930474062452754509693703175926555293299615412074270543861769008088604572463948342869508637021419474076427241206437944938376717240291129686364152028622782491945894451364135712261571383558808703167081686346497045755967398069366992898028843416326594059159360945225284437265452305026530558851261461407313179909199142952410034771259750893821607265895711622021931476259859521140803686769209181624642002505705545369907574213821797166658086604390026010586426855858307310109286968521620565824527905076885825311366304226821384729621409305187812305643335912249991", 10)
e = int("0x10001", 16)
C = int("0x17E2D1355040C086C81F7D0F840371C7905BD4CA04E0689202E928CCC88E9888BF4929BDA46745A6BBF2A8401771C8526AD53BCB91695332633B6007524A1A15FEF90B5AEE0BA12DF7A5287929DAD89DBFF99827073F65C5307A639B5B4C2129595AF7B26C756C4FBBD9FF4A79AC86A1484EA9EA9AA2D1A832CE4EBF5A892BAF92DFB252FB4D2450E9629ADAE46952ED964EB79ED5C2F3F372207E72353340C3C58E24642804E64D9E467584D12A1D1A85FF513D6B966862064188E203966727A1080FE16DAC986E0B990D18CFC9CE087213EDC90049D56FED2A754400B89168EC2C25417B6A8D7760CBD7152183D01BA4C7260A860106037062D8AE9C07CE700", 16)

#Solition 1 recherche
def sexyFactors(n):
     mp.dps = 500
     p = mp.sqrt(n)
     p = int(p)
     q = p-6
     for i in range(0, 6):
         if p*q == n:
             print("found p,q")
             return p,q
         else:
             p += 1
             q += 1
     print("not found")
     return 0,0

#print(sexyFactors(n))

#solution 2 résolution d'équation de degré 2
from sympy.solvers import solve
from sympy import Symbol
x = Symbol('x')
sol = solve (x**2+6*x-n,x)
p = int(sol[1])
q = p+6

# solution 3 : algo de Fermat => devrait marcher car p et q proches, mais pas réussi pour l'instant, moins optimal que solution 1

# solution 4 : chercher sur internet...
# p et q trouvés avec https://www.alpertron.com.ar/ECM.HTM
#q = int("269 653970 229347 386159 395778 618353 710042 696546 841345 985910 145121 736599 013708 251444 699062 715983 611304 031680 170819 807090 036488 184653 221624 933739 271145 959211 186566 651840 137298 227914 453329 401869 141179 179624 428127 508653 257226 023513 694322 210869 665811 240855 745025 766026 879447 359920 868907 719574 457253 034494 436336 296497".replace(" ", ""))
#p = int("269 653970 229347 386159 395778 618353 710042 696546 841345 985910 145121 736599 013708 251444 699062 715983 611304 031680 170819 807090 036488 184653 221624 933739 271145 959211 186566 651840 137298 227914 453329 401869 141179 179624 428127 508653 257226 023513 694322 210869 665811 240855 745025 766026 879447 359920 868907 719574 457253 034494 436336 296503".replace(" ", ""))
print(p)
print(q)
print("p-q =",p-q)
l = (p - 1) * (q - 1)
#print("l = ", hex(l))
#print("e = ", hex(e))
d = inverse(e, l)
#print("d = ", hex(d))
print("(e*d)%l =", (e * d) % l)  # verification de l'inverse

print(dechiffreRSA(C, d, n))






